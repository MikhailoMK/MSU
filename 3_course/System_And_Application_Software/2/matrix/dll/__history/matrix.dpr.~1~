library matrix;

{ Important note about DLL memory management: ShareMem must be the
  first unit in your library's USES clause AND your project's (select
  Project-View Source) USES clause if your DLL exports any procedures or
  functions that pass strings as parameters or function results. This
  applies to all strings passed to and from your DLL--even those that
  are nested in records and classes. ShareMem is the interface unit to
  the BORLNDMM.DLL shared memory manager, which must be deployed along
  with your DLL. To avoid using BORLNDMM.DLL, pass string information
  using PChar or ShortString parameters.

  Important note about VCL usage: when this DLL will be implicitly
  loaded and this DLL uses TWicImage / TImageCollection created in
  any unit initialization section, then Vcl.WicImageInit must be
  included into your library's USES clause. }

uses
  System.SysUtils,
  System.Classes,
  Math;

{$R *.res}
type
  mm=array[1..200,1..200] of integer;
 // mmd=array[1..200,1..200] of real;

function SortMatrixRow(A: mm; size:integer; kind: Integer): mm; stdcall;
var
  i, j,t,row,temp: Integer;
begin
t:=1;
  if kind=1 then t:=0;
  for row := 1 to size do
  begin
    for i := 1 to size-1 do
    begin
      for j := 1 to size-1 do
        begin
          if A[row,j+t]>A[row,j+1-t] then
          begin
            temp:=A[row,j+t];
            A[row,j+t]:=A[row,j+1-t];
            A[row,j+1-t]:=temp;
          end;
        end;
    end;
  end;

  Result:=A;
end;

function SortMatrixCol(A: mm; size:integer; kind: Integer): mm; stdcall;
var
  i, j,t,col,temp: Integer;
begin
t:=1;
  if kind=1 then t:=0;
  for col := 1 to size do
  begin
    for i := 1 to size-1 do
    begin
      for j := 1 to size-1 do
        begin
          if A[j+t,col]>A[j+1-t,col] then
          begin
            temp:=A[j+t,col];
            A[j+t,col]:=A[j+1-t,col];
            A[j+1-t,col]:=temp;
          end;
        end;
    end;
  end;

  Result:=A;
end;

function Sign1(j: Integer): Integer;
begin
  if j > 0 then
    Result := 1
  else if j < 0 then
    Result := -1
  else
    Result := 0;
end;

type mmd=array of array of Double;
function Determinant(matrix:mmd; n: Integer): Double; Stdcall;
var
  det: Double;
  i, j, k: Integer;
  temp: Double;
  scale: Double;
  sign: Integer;
  submatrix:mmd;
begin
  det := 0;
  // Base case: determinant of 1x1 matrix is the only element itself
  if n = 1 then
    Result := matrix[1, 1]
  else
  begin
    // Iterate over each column of the matrix
    for j := 1 to n-1 do
    begin
      // Initialize the submatrix

      for i := 2 to n do
        for k := 1 to n - 1 do
          submatrix[i - 1, k] := matrix[i, k + 1];

      // Calculate the determinant of the submatrix recursively
      det := det + matrix[1, j] * Determinant(submatrix, n - 1)*Sign1(j);

      // Cleanup the submatrix
    end;
    Result := det;
  end;
end;

type mmdynamic=array of array of Double;
function RGetMinor(mrx, minor: mmd; size, row, col: Integer): mmd;
var
  minorRow, minorCol, i, j: Integer;
begin
  minorRow := 0;
  for i := 0 to size - 1 do
  begin
    if i <> row then
    begin
      minorCol := 0;
      for j := 0 to size - 1 do
      begin
        if j <> col then
        begin
          minor[minorRow * (size - 1) + minorCol] := mrx[i * size + j];
          Inc(minorCol);
        end;
      end;
      Inc(minorRow);
    end;
  end;
  Result := minor;
end;

type mme = array[1..200,1..200] of Extended;
function InverseMatrix(mrx:mmd; size: Integer): mmd;StdCall;
var
  invMatrix, minor: mmd;
  det, minorDet: real;
  sign: real;
  i, j, minorSize: Integer;
begin
  det := Determinant(mrx, size);

  sign := 1;

  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      minorSize := size;
      minor := RGetMinor(mrx, minor, size, i, j);
      minorDet := Determinant(minor, minorSize);
      invMatrix[j,i] :=(sign * minorDet / det);
      sign := -sign;
    end;

    if size mod 2 = 0 then
      sign := -sign;
  end;

  Result := invMatrix;
end;



function TransposeMatrix(matrix: mm; size: Integer):mm; stdcall;
var
  i, j, temp: Integer;
begin
  for i := 1 to size do
  begin
    for j := i + 1 to size do
    begin
      temp := matrix[i][j];
      matrix[i][j] := matrix[j][i];
      matrix[j][i] := temp;
    end;
  end;
  result:=matrix;
end;

function AddMatrices(matrix1, matrix2: mm; size: Integer):mm; stdcall;
var
  i, j: Integer;
begin
  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      matrix1[i][j] := matrix1[i][j] + matrix2[i][j];
    end;
  end;
  result:=matrix1;
end;

function SubtractMatrices(matrix1, matrix2: mm; size: Integer):mm; stdcall;
var
  i, j: Integer;
begin
  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      matrix1[i][j] := matrix1[i][j] - matrix2[i][j];
    end;
  end;
  result:=matrix1;
end;

function MultiplyMatrices(matrix1, matrix2:mm; size: Integer):mm;stdcall;
var
  i, j, k: Integer;
  result1:mm;
begin
  for i := 1 to size do
  begin
    for j := 1 to size do
    begin
      result1[i][j] := 0;
      for k := 1 to size do
      begin
        result1[i][j] := result1[i][j] + matrix1[i][k] * matrix2[k][j];
      end;
    end;
  end;
  result:=result1;
end;

 function Conjugate(x: string): string;
var
  i: Integer;
begin
  Result := '';
  for i := 1 to Length(x) do
    if x[i] = '+' then
      Result := Result + '-'
    else if x[i] = '-' then
      Result := Result + '+'
    else
      Result := Result + x[i];
end;

type
  mmc=array[1..200,1..200] of string;
function ConjugateMatrix(matrix:mmc; size:integer):mmc;stdcall;
begin
var
  i, j: Integer;
begin
  for i := 1 to size do
    for j := 1 to size do
      matrix[i][j] := Conjugate(matrix[i][j]);
end;
result:=matrix;
end;

function SumByRow(matrix:mmd; size:integer;row: integer): Double;stdcall;
begin
    var i,j: Integer;
    var sum:Double;
    sum:=0;
    for i :=1  to size do
      begin
         sum:=sum+matrix[i,row];
      end;
    result:=sum;

end;
exports SortMatrixRow,ConjugateMatrix,MultiplyMatrices,SubtractMatrices,AddMatrices,SortMatrixCol,Determinant,InverseMatrix,TransposeMatrix, SumByRow;
begin
end.
