library matrix;

{ Important note about DLL memory management: ShareMem must be the
  first unit in your library's USES clause AND your project's (select
  Project-View Source) USES clause if your DLL exports any procedures or
  functions that pass strings as parameters or function results. This
  applies to all strings passed to and from your DLL--even those that
  are nested in records and classes. ShareMem is the interface unit to
  the BORLNDMM.DLL shared memory manager, which must be deployed along
  with your DLL. To avoid using BORLNDMM.DLL, pass string information
  using PChar or ShortString parameters.

  Important note about VCL usage: when this DLL will be implicitly
  loaded and this DLL uses TWicImage / TImageCollection created in
  any unit initialization section, then Vcl.WicImageInit must be
  included into your library's USES clause. }

uses
  System.SysUtils,
  System.Classes,
  Math;

{$R *.res}
type
  dm=array[0..200,0..200] of real;
  ddm=array of array of real;

function SortMatrixRow(A: dm; row:integer; column:integer; kind: Integer): dm; stdcall;
var
  i, j,t,row1:integer;
  temp: real;
begin
t:=1;
  if kind=1 then t:=0;
  for row1 := 0 to row-1 do
  begin
    for i := 0 to column-2 do
    begin
      for j := 0 to column-2 do
        begin
          if A[row1,j+t]>A[row1,j+1-t] then
          begin
            temp:=A[row1,j+t];
            A[row1,j+t]:=A[row1,j+1-t];
            A[row1,j+1-t]:=temp;
          end;
        end;
    end;
  end;

  Result:=A;
end;

function SortMatrixCol(A: dm; row:integer; column:integer; kind: Integer): dm; stdcall;
var
  i, j,t,col:Integer;
  temp: real;
begin
t:=1;
  if kind=1 then t:=0;
  for col := 0 to column-1 do
  begin
    for i := 0 to row-2 do
    begin
      for j := 0 to row-2 do
        begin
          if A[j+t,col]>A[j+1-t,col] then
          begin
            temp:=A[j+t,col];
            A[j+t,col]:=A[j+1-t,col];
            A[j+1-t,col]:=temp;
          end;
        end;
    end;
  end;

  Result:=A;
end;

function Sign1(j: Integer): Integer;
begin
  if j > 0 then
    Result := 1
  else if j < 0 then
    Result := -1
  else
    Result := 0;
end;


function Determinant(a: ddm; n: integer): real;stdCall;
var
  i, j, k: integer;
  det: real;
  b: ddm;
begin
  if n = 1 then
    det := a[0, 0]
  else if n = 2 then
    det := a[0, 0] * a[1, 1] - a[0, 1] * a[1, 0]
  else
  begin
    det := 0;
    SetLength(b, n, n);
    for i := 0 to n - 1 do
    begin
      for j := 1 to n - 1 do
        for k := 0 to n - 1 do
        begin
          if k < i then
            b[j - 1, k] := a[j, k]
          else if k > i then
            b[j - 1, k - 1] := a[j, k];
        end;
      if i mod 2 = 0 then
        det := det + a[0, i] * Determinant(b, n - 1)
      else
        det := det - a[0, i] * Determinant(b, n - 1);
    end;
  end;
  Result := det;
end;


function InverseMatrix(a: ddm; n: integer):ddm ; stdCall;
var
  i, j, k: integer;
  ratio, aik: double;
  b: ddm;
begin
  SetLength(b, n, n);
  for i := 0 to n - 1 do
  begin
    for j := 0 to n - 1 do
    begin
      if i = j then
        b[i, j] := 1
      else
        b[i, j] := 0;
    end;
  end;

  for i := 0 to n - 1 do
  begin
    aik := a[i, i];
    for j := 0 to n - 1 do
    begin
      a[i, j] := a[i, j] / aik;
      b[i, j] := b[i, j] / aik;
    end;
    for k := 0 to n - 1 do
    begin
      if k <> i then
      begin
        ratio := a[k, i];
        for j := 0 to n - 1 do
        begin
          a[k, j] := a[k, j] - ratio * a[i, j];
          b[k, j] := b[k, j] - ratio * b[i, j];
        end;
      end;
    end;
  end;

  Result := b;
end;

function TransposeMatrix(matrix: ddm; size: Integer):ddm; stdcall;
var
  i, j:Integer;
  temp: real;

begin
  for i := 0 to size-1 do
  begin
    for j := i + 1 to size-1 do
    begin
      temp := matrix[i][j];
      matrix[i][j] := matrix[j][i];
      matrix[j][i] := temp;
    end;
  end;
  result:=matrix;
end;

function AddMatrices(matrix1, matrix2: ddm; row: Integer;column:integer):ddm; stdcall;
var
  i, j: Integer;
begin
  for i := 0 to row-1 do
  begin
    for j := 0 to column-1 do
    begin
      matrix1[i][j] := matrix1[i][j] + matrix2[i][j];
    end;
  end;
  result:=matrix1;
end;

function SubtractMatrices(matrix1, matrix2: dm; row: Integer; column:integer):dm; stdcall;
var
  i, j: Integer;
begin
  for i := 1 to row do
  begin
    for j := 1 to column do
    begin
      matrix1[i][j] := matrix1[i][j] - matrix2[i][j];
    end;
  end;
  result:=matrix1;
end;

function MultiplyMatrices(matrix1, matrix2:dm; row1,col1,row2,col2: Integer):dm;stdcall;
var
  i, j, k: Integer;
  result1:dm;
begin
  for i := 1 to row1 do
  begin
    for j := 1 to col2 do
    begin
      result1[i][j] := 0;
      for k := 1 to col1 do
      begin
        result1[i][j] := result1[i][j] + matrix1[i][k] * matrix2[k][j];
      end;
    end;
  end;
  result:=result1;
end;

 function Conjugate(x: string): string;
var
  i: Integer;
begin
  Result := '';
  for i := 1 to Length(x) do
    if x[1]='i' then
      Result:=Result+'-'
    else if x[i] = '+' then
      Result := Result + '-'
    else if x[i] = '-' then
      Result := Result + '+'
    else
      Result := Result + x[i];
end;

type mmc=array of array of string;
function ConjugateMatrix(matrix:mmc; row:integer;column:integer):mmc;stdcall;
begin
var
  i, j: Integer;
begin
  for i := 0 to row-1 do
    for j := 0 to column-1 do
      matrix[i][j] := Conjugate(matrix[i][j]);
end;
result:=matrix;
end;

type RealArray=array of real;
function SpiralMatrixToArray(a: ddm; n: integer; m: integer; clockwise: boolean): RealArray; stdCall;
var
  i, k, top, bottom, left, right: integer;
  res: RealArray;
begin
  SetLength(res, n*m);
  top := 0;
  bottom := n-1;
  left := 0;
  right := m-1;
  k := 0;

  while true do
  begin
    if left > right then break;
    for i := left to right do
    begin
      if clockwise then
        res[k] := a[top, i]
      else
        res[k] := a[bottom, i];
      k := k + 1;
    end;
    if clockwise then
      top := top + 1
    else
      bottom := bottom - 1;

    if top > bottom then break;
    for i := top to bottom do
    begin
      if clockwise then
        res[k] := a[i, right]
      else
        res[k] := a[i, left];
      k := k + 1;
    end;
    if clockwise then
      right := right - 1
    else
      left := left + 1;

    if left > right then break;
    for i := right downto left do
    begin
      if clockwise then
        res[k] := a[bottom, i]
      else
        res[k] := a[top, i];
      k := k + 1;
    end;
    if clockwise then
      bottom := bottom - 1
    else
      top := top + 1;

    if top > bottom then break;
    for i := bottom downto top do
    begin
      if clockwise then
        res[k] := a[i, left]
      else
        res[k] := a[i, right];
      k := k + 1;
    end;
    if clockwise then
      left := left + 1
    else
      right := right - 1;
  end;

  Result := res;
end;

function ArrayToSpiralMatrix(a: RealArray; n: integer; m: integer): ddm; stdCall;
var
  i, k, top, bottom, left, right: integer;
  res: ddm;
begin
  SetLength(res, n, m);
  top := 0;
  bottom := n-1;
  left := 0;
  right := m-1;
  k := 0;

  while true do
  begin
    if left > right then break;
    for i := left to right do
    begin
      res[top, i] := a[k];
      k := k + 1;
    end;
    top := top + 1;

    if top > bottom then break;
    for i := top to bottom do
    begin
      res[i, right] := a[k];
      k := k + 1;
    end;
    right := right - 1;

    if left > right then break;
    for i := right downto left do
    begin
      res[bottom, i] := a[k];
      k := k + 1;
    end;
    bottom := bottom - 1;

    if top > bottom then break;
    for i := bottom downto top do
    begin
      res[i, left] := a[k];
      k := k + 1;
    end;
    left := left + 1;
  end;

  Result := res;
end;


function ReadMatrixByCorners(a: ddm; n: integer; m: integer): RealArray; stdCall;
var
  i, k, top, bottom, left, right: integer;
  res: RealArray;
begin
  SetLength(res, n*m);
  top := 0;
  bottom := n-1;
  left := 0;
  right := m-1;
  k := 0;

  while true do
  begin
    if left > right then break;
    for i := left to right do
    begin
      res[k] := a[top, i];
      k := k + 1;
    end;
    top := top + 1;

    if top > bottom then break;
    for i := top to bottom do
    begin
      res[k] := a[i, right];
      k := k + 1;
    end;
    right := right - 1;
  end;

  Result := res;
end;

function WriteMatrixByCorners(res: RealArray; n: integer; m: integer): ddm; stdCall;
var
  i, k, top, bottom, left, right: integer;
  a: ddm;
begin
  SetLength(a, n, m);
  top := 0;
  bottom := n-1;
  left := 0;
  right := m-1;
  k := 0;

  while true do
  begin
    if left > right then break;
    for i := left to right do
    begin
      a[top, i] := res[k];
      k := k + 1;
    end;
    top := top + 1;

    if top > bottom then break;
    for i := top to bottom do
    begin
      a[i, right] := res[k];
      k := k + 1;
    end;
    right := right - 1;
  end;

  Result := a;
end;

function RankOfMatrix(matrix:ddm; rowCount, colCount: Integer): Integer; stdCall;
var
  rank, row, col, i, j, k, pivot, index: Integer;
  rowSelected: array of Boolean;
begin
  rank := colCount;
  SetLength(rowSelected, rowCount);
  FillChar(rowSelected[0], rowCount * SizeOf(Boolean), False);
  row := 0;
  for col := 0 to colCount - 1 do
  begin
    pivot := -1;
    index := col;

    for i := row to rowCount - 1 do
    begin
      if not rowSelected[i] and (matrix[i,col] <> 0) then
      begin
        pivot := i;
        break;
      end;
    end;

    if pivot = -1 then
    begin
      Dec(rank);
    end
    else
    begin
      rowSelected[pivot] := True;
      for j := index + 1 to colCount - 1 do
      begin
        for k := 0 to rowCount - 1 do
        begin
          if (k <> pivot) and (matrix[k,index] <> 0) then
          begin
            matrix[k,j] := matrix[k,j] - matrix[pivot,j] *
              matrix[k,index] / matrix[pivot,index];
          end;
        end;
      end;
    end;
  end;

  Result := rank;
end;

exports RankOfMatrix,ReadMatrixByCorners,WriteMatrixByCorners,ArrayToSpiralMatrix,SortMatrixRow,SpiralMatrixToArray,InverseMatrix,ConjugateMatrix,MultiplyMatrices,SubtractMatrices,AddMatrices,SortMatrixCol,Determinant,TransposeMatrix;
begin
end.
